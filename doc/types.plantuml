@startuml
struct Couple<T, U> {
    (T, U)
    __
}
struct Pair<T> {
    Couple(T, T)
    __
}
Couple <-- Pair

struct Any<T, U> {
    Couple<Option< T >, Option< U >>
}
Couple <-- Any

Any <-- LeftOrRight
interface LeftOrRight<L, R> {
    + {abstract} left&self) -> Option<& L>
    + {abstract} right&self) -> Option<& R>
    + is_left(&self) -> bool
    + is_right(&self) -> bool
    + any(&self) -> Any<& L, & R>
}

LeftOrRight <|-- Unwrap
abstract Unwrap<L, R> {
    * FL: FnOnce(L) -> L
    * FR: FnOnce(R) -> R
    + {abstract} left_or_else(self, f: FL) -> L
    + {abstract} right_or_else(self, f: FR) -> R
    + left_or(self, l: L) -> L
    + right_or(self, r: R) -> R
    + left_or_default(self) -> L
    + right_or_default(self) -> R
    + expect_left(self, msg: &str) -> L
    + expect_right(self, msg: &str) -> R
    + unwrap_left(self) -> L
    + unwrap_right(self) -> R
}
LeftOrRight <|-- Map
abstract Map<L, R> {
    + {abstract}{static} type Output<L2, R2>: LeftOrRight<L2, R2>
    __
    * FL: FnOnce(L) -> L2
    * FR: FnOnce(R) -> R2
    + {abstract} map<FL, FR, L2, R2>(self, fl: FL, fr: FR) -> Self::Output<L2, R2>
    + map_left<FL, L2>(self, fl: FL) -> Self::Output<L2, R>
    + map_right<FR, R2>(self, fr: FR) -> Self::Output<L, R2>
}

LeftOrRight <|-- Swap
interface Swap<L, R> {
    + {abstract}{static} type Output: LeftOrRight<R, L>
    __
    + {abstract} swap(self) -> Self::Output
}

interface From< T > {
    {abstract} {static} from(T) -> Self
    into(self) -> T
}
metaclass "Copy, Clone, Eq, PartialEq, Debug, Hash"
interface Not {
    !a
}
interface Add {
    a + b
}
interface Sub {
    a - b
}

diamond "LeftOrRight+Swap+Map+Unwrap+Not"


"Copy, Clone, Eq, PartialEq, Debug, Hash" <... "LeftOrRight+Swap+Map+Unwrap+Not"
Not <|.. "LeftOrRight+Swap+Map+Unwrap+Not"
From <|.. "LeftOrRight+Swap+Map+Unwrap+Not"
LeftOrRight <|.. "LeftOrRight+Swap+Map+Unwrap+Not"
Swap <|.. "LeftOrRight+Swap+Map+Unwrap+Not"
Map <|.. "LeftOrRight+Swap+Map+Unwrap+Not"
Unwrap <|.. "LeftOrRight+Swap+Map+Unwrap+Not"

"LeftOrRight+Swap+Map+Unwrap+Not" <|.. EitherOf
enum EitherOf<L, R> {
    * Left(L)
    * Right(R)
    __
    Swap::Output = EitherOf<R, L>
    Not::Output = EitherOf<R, L>
    Map::Output<L2, R2> = EitherOf<L2, R2>
    ==
    __
    + {static} new_left(l: L) -> Self
    + {static} new_right(r: R) -> Self
}

struct BothOf<L, R> {
    + left: L
    + right: R
    __
    Swap::Output = BothOf<R, L>
    Not::Output = BothOf<R, L>
    Map::Output<L2, R2> = BothOf<L2, R2>
    ==
    + {static} new(l: L, r: R) -> Self
    + {static} from_couple(couple: Couple<L, R>) -> Self
    + into_couple(self) -> Couple<L, R>
    + into_left(self) -> L
    + into_right(self) -> R
}
"LeftOrRight+Swap+Map+Unwrap+Not" <|.. BothOf

Add <|... AnyOf
Sub <|... AnyOf
"LeftOrRight+Swap+Map+Unwrap+Not" <|.. AnyOf
enum AnyOf<L, R> {
    * Neither
    * Either(EitherOf<L, R>)
    * Both(BothOf<L, R>)
    __
    Swap::Output = AnyOf<R, L>
    Not::Output = AnyOf<R, L>
    Map::Output<L2, R2> = AnyOf<L2, R2>
    BitAnd::Output = Self
    BitOr::Output = Self
    ==
    * FB: FnOnce() -> Self
    + {static} new(l: Option<L>, r: Option<R>) -> Self
    + {static} new_neither() -> Self
    + {static} new_left(l: L) -> Self
    + {static} new_right(r: R) -> Self
    + {static} new_both(l: L, r: R) -> Self
    + {static} from_both(both: BothOf<L, R>) -> Self
    + {static} from_either(either: EitherOf<L, R>) -> Self
    + {static} from_any(any: Any<L, R>) -> Self
    + filter_left(self) -> Self
    + filter_right(self) -> Self
    + with_left(self, l: L) -> Self
    + with_right(self, r: R) -> Self
    + combine(self, other: Self) -> Self
    + filter(self, other: Self) -> Self
    + to_either_pair(&self) -> Pair<Option<EitherOf<L, R>>
    + has_left(&self) -> bool
    + has_right(&self) -> bool
    + is_any(&self) -> bool
    + is_either(&self) -> bool
    + is_both(&self) -> bool
    + is_neither(&self) -> bool
    + is_neither_or_both(&self) -> bool
    + into_both(self) -> BothOf<L, R>
    + into_either(self) -> EitherOf<L, R>
    + both_or_none(self) -> Option<Couple<&L, &R>>
    + both_or_else(self, f: FB) -> BothOf<L, R>
    + both_or(self, default: BothOf<L, R>) -> BothOf<L, R>
    + unwrap_both(self) -> BothOf<L, R>
}

struct AnyOf4<LL, LR, RL, RR> {
    AnyOf<AnyOf<LL, LR>, AnyOf<RL, RR>>
    __
    + ll(&self) -> Option<& LL>
    + lr(&self) -> Option<& LR>
    + rl(&self) -> Option<& RL>
    + rr(&self) -> Option<& RR>
}
AnyOf o-- AnyOf4
struct AnyOf8< ... > {
    AnyOf<AnyOf4, AnyOf4>
    __
    + lll(&self) -> Option<& LLL>
    + llr(&self) -> Option<& LLR>
    + lrl(&self) -> Option<& LRL>
    + lrr(&self) -> Option<& LRR>
    + rll(&self) -> Option<& RLL>
    + rlr(&self) -> Option<& RLR>
    + rrl(&self) -> Option<& RRL>
    + rrr(&self) -> Option<& RRR>
}
AnyOf o-- AnyOf8
struct AnyOf16< ... > {
    AnyOf<AnyOf8, AnyOf8>
    __
    + llll(&self) -> Option<& LLLL>
    + lllr(&self) -> Option<& LLLR>
    + llrl(&self) -> Option<& LLRL>
    + llrr(&self) -> Option<& LLRR>
    + lrll(&self) -> Option<& LRLL>
    + lrlr(&self) -> Option<& LRLR>
    + lrrl(&self) -> Option<& LRRL>
    + lrrr(&self) -> Option<& LRRR>
    + rlll(&self) -> Option<& RLLL>
    + rllr(&self) -> Option<& RLLR>
    + rlrl(&self) -> Option<& RLRL>
    + rlrr(&self) -> Option<& RLRR>
    + rrll(&self) -> Option<& RRLL>
    + rrlr(&self) -> Option<& RRLR>
    + rrrl(&self) -> Option<& RRRL>
    + rrrr(&self) -> Option<& RRRR>
}
AnyOf o-- AnyOf16

@enduml